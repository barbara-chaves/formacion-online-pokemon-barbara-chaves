{"version":3,"sources":["modules/getDataFromServer.js","components/Card.js","components/Header.js","components/Filter.js","components/List.js","modules/getDetailsFromServer.js","components/Profile.js","components/Details.js","components/App.js","serviceWorker.js","index.js"],"names":["getPokemon","id","ENDPOINT","fetch","then","response","json","getPokemonTypes","types","map","type","name","sort","getPokemonColor","colors","grass","water","fire","poison","flying","bug","normal","electric","ground","fairy","fighting","psychic","rock","steel","ice","ghost","dragon","getPokemonsList","promises","i","push","Promise","all","data","forEach","pokemon","species","sprites","image","front_default","Card","props","style","background","className","onClick","getPokemonName","to","backgroundImage","Header","Filter","onChange","onInputChange","value","inputValue","placeholder","List","pokemons","index","key","renderCardList","path","getDetailsFromServer","info","Object","assign","height","capture_rate","egg_groups","gender_rate","abilities","flavor_text_entries","weight","genera","console","log","ability","egg","translated_name","find","item","language","genus","text","flavor_text","formatData","Profile","quest","darkenColor","col","amt","usePound","slice","num","parseInt","r","b","g","toString","Details","componentDidMount","getInicialState","detailsFromLocal","JSON","parse","localStorage","getItem","keys","length","setState","details","pokemonName","saveLocalStorage","state","setItem","stringify","this","getTitlesColor","backgroundColor","getList","list","color","src","alt","React","Component","App","pokemonsFromLocal","selectedPokemon","detale","handleInputChange","event","filter","target","renderList","toLowerCase","filteredPokemons","includes","renderDetails","renderProps","match","params","bind","exact","render","Boolean","window","location","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9aa95b7d.chunk.js","sourcesContent":["const getPokemon = (id) => {\n  const ENDPOINT = `https://pokeapi.co/api/v2/pokemon/${id}/`;\n  return fetch(ENDPOINT)\n    .then(response => response.json());\n};\n\nconst getPokemonTypes = types => types.map(type => type.type.name).sort();\n\nconst getPokemonColor = types => {\n  const colors = {\n    grass: '#78c850',\n    water: '#6890f0',\n    fire: '#f08030',\n    poison: '#a040a0',\n    flying: '#A890F0',\n    bug: '#A8B821',\n    normal: '#A8A878',\n    electric: '#f8d12f',\n    ground: '#E0C068',\n    fairy: '#EE99AC',\n    fighting: '#C03028',\n    psychic: '#F75888',\n    rock: '#817333',\n    steel: '#B8B8D0',\n    ice: '#98D8D8',\n    ghost:'#705797',\n    dragon: '#3E1EC0'\n  }\n  return getPokemonTypes(types).map(type => colors[type])\n}\n\nconst getPokemonsList = () => {\n  const promises = [];\n  for (let i = 1; i <= 151; i++){\n    promises.push(getPokemon(i));\n  }\n  return Promise.all(promises)\n    .then(data => data.forEach(pokemon => {\n    const {species, sprites, types} = pokemon\n    return {\n      name: species.name,\n      image: sprites.front_default,\n      types: getPokemonTypes(types),\n      colors: getPokemonColor(types)\n    }\n  }))\n}\n\nexport { getPokemonsList, getPokemonColor };\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport \"../stylesheets/card.scss\";\n\nconst Card = props => {\n  const { name, image, colors } = props.pokemon;\n  const handleClick = () => props.getPokemonName(name);\n  const style = {\n    background: `linear-gradient(90deg, ${colors[0]} 50%, ${colors[1] ||\n      colors[0]} 50%)`\n  };\n  return (\n    <div className=\"pokemon\" style={style} onClick={handleClick}>\n      <Link to={\"/\" + name}>\n        <div\n          className=\"pokemon__image\"\n          style={{ backgroundImage: `url(${image})` }}\n        ></div>\n        <p className=\"pokemon__name\">{name}</p>\n      </Link>\n    </div>\n  );\n};\n\nexport default Card;\n","import React from 'react';\nimport '../stylesheets/header.scss'\n\nconst Header = () => {\n  return (\n    <header className='header'>\n      <h1 className='header__title'>Pokedex</h1>\n    </header>\n  )\n}\n\nexport default Header","import React from \"react\";\nimport '../stylesheets/filter.scss';\n\nconst Filter = props => {\n  return (\n    <div className=\"filter\">\n      <input\n        className=\"filter_input\"\n        onChange={props.onInputChange}\n        value={props.inputValue}\n        placeholder=\"Search for Pokemon name or type\"\n      />\n      {/* <i class=\"fas fa-search\"></i> */}\n    </div>\n  );\n};\n\nexport default Filter;\n","import React from \"react\";\nimport Card from \"./Card\";\nimport \"../stylesheets/list.scss\";\nimport Header from \"./Header\";\nimport Filter from \"./Filter\";\n\nconst renderCardList = props => {\n  return props.pokemons.map((pokemon, index) => {\n    return (\n      <li className=\"list__item\" key={index}>\n        <Card pokemon={pokemon} getPokemonName={props.getPokemonName} />\n      </li>\n    );\n  });\n};\n\nconst List = props => {\n  return (\n    <div className=\"list-page\">\n      <Header />\n      <Filter inputValue={props.inputValue} onInputChange={props.onInputChange}/>\n      <ul className=\"list\">{renderCardList(props)}</ul>\n    </div>\n  );\n};\n\nexport default List;\n","import {getPokemonColor} from './getDataFromServer'\n\nconst getPokemon = (path, pokemon) => {\n  const ENDPOINT = `https://pokeapi.co/api/v2/${path}/${pokemon}/`;\n  return fetch(ENDPOINT)\n  .then(response => response.json());\n}\n\nconst getPokemonsList = (pokemon) => {\n  const promises = [getPokemon('pokemon', pokemon), getPokemon('pokemon-species', pokemon)];\n  return Promise.all(promises)\n}\n\nconst formatData = data => {\n  const info = Object.assign(data[0], data[1]);\n  const {name, height, id, capture_rate, egg_groups, gender_rate, abilities, flavor_text_entries, weight, sprites, types, genera} = info;\n  console.log(info)\n  return {\n    abilities: abilities.map(ability => ability.ability.name), \n    capture_rate: capture_rate,\n    colors: getPokemonColor(types),\n    egg_groups: egg_groups.map(egg => egg.name), \n    height: height/10,\n    gender_rate: gender_rate,\n    id: id,\n    image: sprites.front_default,\n    name: name,\n    translated_name: genera.find(item => item.language.name === 'en').genus,\n    text: flavor_text_entries.find(item => item.language.name === 'en').flavor_text,\n    types: types.map(type => type.type.name).sort(),\n    weight: weight/10\n  }\n}\n\nconst getDetailsFromServer = pokemon => {\n    return getPokemonsList(pokemon)\n      .then(data => formatData(data))\n};\n\nexport default getDetailsFromServer","import React from \"react\";\n\nconst Profile = props => {\n  return (\n    <div className=\"profile__text\">\n      <span className=\"profile__text__span\">{props.quest}</span>\n      {props.data}\n    </div>\n  );\n};\n\nexport default Profile\n","import React from \"react\";\nimport \"../stylesheets/details.scss\";\nimport getDetailsFromServer from \"../modules/getDetailsFromServer\";\nimport Profile from \"./Profile\";\n\nfunction darkenColor(col, amt) {\n  var usePound = false;\n\n  if (col[0] === \"#\") {\n    col = col.slice(1);\n    usePound = true;\n  }\n\n  var num = parseInt(col, 16);\n  var r = (num >> 16) + amt;\n\n  if (r > 255) r = 255;\n  else if (r < 0) r = 0;\n\n  var b = ((num >> 8) & 0x00ff) + amt;\n\n  if (b > 255) b = 255;\n  else if (b < 0) b = 0;\n\n  var g = (num & 0x0000ff) + amt;\n\n  if (g > 255) g = 255;\n  else if (g < 0) g = 0;\n\n  return (usePound ? \"#\" : \"\") + (g | (b << 8) | (r << 16)).toString(16);\n}\n\nclass Details extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      details: {}\n    };\n  }\n\n  componentDidMount = () => {\n    this.getInicialState();\n  };\n\n  getInicialState = () => {\n    const detailsFromLocal = JSON.parse(localStorage.getItem(\"details\"));\n    if (Object.keys(detailsFromLocal).length) {\n      this.setState({ details: detailsFromLocal });\n    } else {\n      getDetailsFromServer(this.props.pokemonName).then(details =>\n        this.setState({ details })\n      );\n    }\n  };\n\n  saveLocalStorage = () => {\n    if (this.state.details) {\n      localStorage.setItem(\"details\", JSON.stringify(this.state.details));\n    }\n  };\n\n  render() {\n    this.saveLocalStorage();\n\n    const {\n      abilities,\n      name,\n      height,\n      capture_rate,\n      colors,\n      egg_groups,\n      id,\n      image,\n      weight,\n      gender_rate,\n      text,\n      translated_name,\n      types\n    } = this.state.details;\n\n    const getBGColor = () => {\n      return colors\n        ? {\n            background: `linear-gradient(90deg, ${colors[0]} 50%, ${colors[1] ||\n              colors[0]} 50%)`\n          }\n        : null;\n    };\n\n    const getTitlesColor = () => {\n      return colors ? { backgroundColor: darkenColor(colors[0], -60) } : null;\n    };\n\n    const getList = (list, colors) => {\n      const color = colors || \"\";\n      const renderList = () =>\n        list.map((item, index) => (\n          <li key={index} style={{ backgroundColor: color[index] }}>\n            {item}\n          </li>\n        ));\n      return list ? <ul>{renderList()}</ul> : \"\";\n    };\n\n    return Object.keys(this.state.details).length ? (\n      <div className=\"details-page\" style={getBGColor()}>\n        <div className=\"details\">\n          <h1 className=\"details__name\" style={getTitlesColor()}>\n            {name}\n          </h1>\n          <div className=\"details__container\">\n            <section className=\"description\">\n              <img className=\"description__image\" src={image} alt={name} />\n              <div className=\"description__types\">\n                <ul>{getList(types, colors)}</ul>\n              </div>\n              <h3 className=\"description__id\">{`# ${id}`}</h3>\n              <p className=\"description__translated_name\">{translated_name}</p>\n              <p className=\"description__text\">{text}</p>\n            </section>\n            <section className=\"profile\">\n              <h2 className=\"profile__title\" style={getTitlesColor()}>\n                Profile\n              </h2>\n              <Profile quest={\"Heigth: \"} data={`${height}m`} />\n              <Profile quest={\"Weight: \"} data={`${weight}kg`} />\n              <Profile quest={\"Catch Rate: \"} data={`${capture_rate}%`} />\n              <Profile quest={\"Egg Groups: \"} data={getList(egg_groups)} />\n              <Profile quest={\"Abilities: \"} data={getList(abilities)} />\n              <Profile quest={\"Gender Ratio: \"} data={gender_rate} />\n            </section>\n          </div>\n        </div>\n      </div>\n    ) : (\n      <p>Loading</p>\n    );\n  }\n}\n\nexport default Details;\n","import React from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\nimport \"../stylesheets/app.scss\";\nimport { getPokemonsList } from \"../modules/getDataFromServer\";\nimport List from \"./List\";\nimport Details from \"./Details\";\nimport getDetailsFromServer from \"../modules/getDetailsFromServer\";\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      pokemons: [],\n      selectedPokemon: \"\",\n      filter: \"\"\n    };\n\n    this.getPokemonName = this.getPokemonName.bind(this);\n    this.handleInputChange = this.handleInputChange.bind(this);\n  }\n\n  componentDidMount = () => {\n    this.getInicialState();\n  };\n\n  getInicialState = () => {\n    const pokemonsFromLocal = JSON.parse(localStorage.getItem(\"pokemons\"));\n    if (pokemonsFromLocal) {\n      this.setState({ pokemons: pokemonsFromLocal });\n    } else {\n      getPokemonsList().then(pokemons => this.setState({ pokemons }));\n    }\n  };\n\n  getPokemonName = selectedPokemon => {\n    this.setState({ selectedPokemon });\n    getDetailsFromServer(selectedPokemon).then(detale =>\n      this.setState({ detale })\n    );\n  };\n\n  handleInputChange = event => {\n    const filter = event.target.value;\n    this.setState({ filter });\n  };\n\n  renderList = () => {\n    const filter = this.state.filter.toLowerCase();\n    const filteredPokemons = this.state.pokemons.filter(\n      pokemon =>\n        pokemon.name.includes(filter) ||\n        pokemon.types.toString().includes(filter)\n    );\n\n    return (\n      <List\n        pokemons={filteredPokemons}\n        getPokemonName={this.getPokemonName}\n        onInputChange={this.handleInputChange}\n        inputValue={this.state.filter}\n      />\n    );\n  };\n\n  renderDetails = renderProps => {\n    return <Details pokemonName={renderProps.match.params.name} />;\n  };\n\n  saveLocalStorage = () => {\n    if (this.state.pokemons.length) {\n      localStorage.setItem(\"pokemons\", JSON.stringify(this.state.pokemons));\n    }\n  };\n\n  render() {\n    this.saveLocalStorage();\n\n    return (\n      <div className=\"App\">\n        <Switch>\n          <Route exact path=\"/\" render={this.renderList} />\n          <Route path={\"/:name\"} render={this.renderDetails} />\n        </Switch>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {HashRouter} from 'react-router-dom';\nimport './index.scss';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<HashRouter><App /></HashRouter>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}