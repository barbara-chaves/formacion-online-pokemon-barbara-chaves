{
  "version": 3,
  "sources": [
    "modules/getDataFromServer.js",
    "components/Card.js",
    "components/Header.js",
    "components/Filter.js",
    "components/List.js",
    "modules/getDetailsFromServer.js",
    "modules/darkerColor.js",
    "components/ProfileItem.js",
    "components/Details.js",
    "components/App.js",
    "serviceWorker.js",
    "index.js"
  ],
  "names": [
    "getPokemon",
    "id",
    "ENDPOINT",
    "fetch",
    "then",
    "response",
    "json",
    "getPokemonTypes",
    "types",
    "map",
    "type",
    "name",
    "sort",
    "getPokemonColor",
    "colors",
    "grass",
    "water",
    "fire",
    "poison",
    "flying",
    "bug",
    "normal",
    "electric",
    "ground",
    "fairy",
    "fighting",
    "psychic",
    "rock",
    "steel",
    "ice",
    "ghost",
    "dragon",
    "createPromisesList",
    "promises",
    "i",
    "push",
    "getPokemonsList",
    "a",
    "Promise",
    "all",
    "data",
    "pokemon",
    "species",
    "sprites",
    "image",
    "front_default",
    "Card",
    "props",
    "style",
    "background",
    "className",
    "onClick",
    "getPokemonDetails",
    "to",
    "backgroundImage",
    "Header",
    "Filter",
    "onChange",
    "onInputChange",
    "value",
    "inputValue",
    "placeholder",
    "List",
    "pokemons",
    "index",
    "key",
    "renderCardList",
    "path",
    "getData",
    "find",
    "item",
    "language",
    "formatData",
    "info",
    "Object",
    "assign",
    "height",
    "capture_rate",
    "egg_groups",
    "gender_rate",
    "abilities",
    "flavor_text_entries",
    "weight",
    "genera",
    "evolution_chain",
    "url",
    "evolution",
    "chain",
    "evolves_to",
    "specie",
    "getEvolution",
    "ability",
    "egg",
    "translated_name",
    "genus",
    "text",
    "flavor_text",
    "getDetailsFromServer",
    "darkenColor",
    "col",
    "amt",
    "usePound",
    "slice",
    "num",
    "parseInt",
    "r",
    "b",
    "g",
    "toString",
    "ProfileItem",
    "quest",
    "Details",
    "componentDidMount",
    "getInicialState",
    "detailsFromLocal",
    "JSON",
    "parse",
    "localStorage",
    "getItem",
    "keys",
    "length",
    "setState",
    "details",
    "pokemonName",
    "componentWillUpdate",
    "saveLocalStorage",
    "state",
    "setItem",
    "stringify",
    "this",
    "getTitlesColor",
    "backgroundColor",
    "getList",
    "list",
    "color",
    "src",
    "alt",
    "currPokemon",
    "getEvolutionList",
    "especie",
    "e",
    "pokemonList",
    "getEvolutionItem",
    "React",
    "Component",
    "App",
    "selectedPokemon",
    "detale",
    "handleInputChange",
    "event",
    "filter",
    "target",
    "renderList",
    "toLowerCase",
    "filteredPokemons",
    "includes",
    "renderDetails",
    "renderProps",
    "match",
    "params",
    "bind",
    "exact",
    "render",
    "Boolean",
    "window",
    "location",
    "hostname",
    "ReactDOM",
    "document",
    "getElementById",
    "navigator",
    "serviceWorker",
    "ready",
    "registration",
    "unregister"
  ],
  "mappings": "4aAAMA,EAAa,SAACC,GAClB,IAAMC,EAAQ,4CAAwCD,EAAxC,KACd,OAAOE,MAAMD,GACVE,MAAK,SAAAC,GAAQ,OAAIA,EAASC,WAGzBC,EAAkB,SAAAC,GAAK,OAAIA,EAAMC,KAAI,SAAAC,GAAI,OAAIA,EAAKA,KAAKC,QAAMC,QAE7DC,EAAkB,SAAAL,GACtB,IAAMM,EAAS,CACbC,MAAO,UACPC,MAAO,UACPC,KAAM,UACNC,OAAQ,UACRC,OAAQ,UACRC,IAAK,UACLC,OAAQ,UACRC,SAAU,UACVC,OAAQ,UACRC,MAAO,UACPC,SAAU,UACVC,QAAS,UACTC,KAAM,UACNC,MAAO,UACPC,IAAK,UACLC,MAAM,UACNC,OAAQ,WAEV,OAAOxB,EAAgBC,GAAOC,KAAI,SAAAC,GAAI,OAAII,EAAOJ,OAG7CsB,EAAqB,WAEzB,IADA,IAAMC,EAAW,GACRC,EAAI,EAAGA,GAAK,IAAKA,IACxBD,EAASE,KAAKnC,EAAWkC,IAE3B,OAAOD,GAGHG,EAAe,uCAAG,4BAAAC,EAAA,sEACHC,QAAQC,IAAIP,KADT,cAChBQ,EADgB,yBAEfA,EAAK/B,KAAI,SAAAgC,GAAY,IAClBC,EAA4BD,EAA5BC,QAASC,EAAmBF,EAAnBE,QAASnC,EAAUiC,EAAVjC,MAC1B,MAAO,CACLG,KAAM+B,EAAQ/B,KACdiC,MAAOD,EAAQE,cACfrC,MAAOD,EAAgBC,GACvBM,OAAQD,EAAgBL,QARN,2CAAH,qDCfNsC,G,MApBF,SAAAC,GAAU,IAAD,EACYA,EAAMN,QAA9B9B,EADY,EACZA,KAAMiC,EADM,EACNA,MAAO9B,EADD,EACCA,OAEfkC,EAAQ,CACZC,WAAW,0BAAD,OAA4BnC,EAAO,GAAnC,iBAA8CA,EAAO,IAC7DA,EAAO,GADC,UAGZ,OACE,yBAAKoC,UAAU,UAAUF,MAAOA,EAAOG,QANrB,kBAAMJ,EAAMK,eAAezC,KAO3C,kBAAC,IAAD,CAAM0C,GAAI,IAAM1C,GACd,yBACEuC,UAAU,iBACVF,MAAO,CAAEM,gBAAgB,OAAD,OAASV,EAAT,QAE1B,uBAAGM,UAAU,iBAAiBvC,OCPvB4C,G,YARA,WACb,OACE,4BAAQL,UAAU,UAChB,wBAAIA,UAAU,iBAAd,cCWSM,G,MAdA,SAAAT,GACb,OACE,yBAAKG,UAAU,UACb,2BACEA,UAAU,eACVO,SAAUV,EAAMW,cAChBC,MAAOZ,EAAMa,WACbC,YAAY,uCCgBLC,EAVF,SAAAf,GACX,OACE,yBAAKG,UAAU,aACb,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAQU,WAAYb,EAAMa,WAAYF,cAAeX,EAAMW,gBAC3D,wBAAIR,UAAU,QAfG,SAAAH,GACrB,OAAOA,EAAMgB,SAAStD,KAAI,SAACgC,EAASuB,GAClC,OACE,wBAAId,UAAU,aAAae,IAAKD,GAC9B,kBAAC,EAAD,CAAMvB,QAASA,EAASW,eAAgBL,EAAMK,qBAW1Bc,CAAenB,MCnBrC/C,G,MAAa,SAACmE,EAAM1B,GACxB,IAAMvC,EAAQ,oCAAgCiE,EAAhC,YAAwC1B,EAAxC,KACd,OAAOtC,MAAMD,GAAUE,MAAK,SAAAC,GAAQ,OAAIA,EAASC,YAW7C8D,EAAU,SAAA5B,GAAI,OAAIA,EAAK6B,MAAK,SAAAC,GAAI,MAA2B,OAAvBA,EAAKC,SAAS5D,SAelD6D,EAAa,SAAAhC,GACjB,IAAMiC,EAAOC,OAAOC,OAAOnC,EAAK,GAAIA,EAAK,IAEvC7B,EAYE8D,EAZF9D,KACAiE,EAWEH,EAXFG,OACA3E,EAUEwE,EAVFxE,GACA4E,EASEJ,EATFI,aACAC,EAQEL,EARFK,WACAC,EAOEN,EAPFM,YACAC,EAMEP,EANFO,UACAC,EAKER,EALFQ,oBACAC,EAIET,EAJFS,OACAvC,EAGE8B,EAHF9B,QACAnC,EAEEiE,EAFFjE,MACA2E,EACEV,EADFU,OAGF,OA9BmB,SAAAV,GACnB,OAAOtE,MAAMsE,EAAKW,gBAAgBC,KAC/BjF,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAkF,GAMJ,MAAO,CALO,CAACA,EAAUC,MAAM7C,QAAQ/B,MACxB2E,EAAUC,MAAMC,WAAW/E,KACxC,SAAAgF,GAAM,OAAIA,EAAO/C,QAAQ/B,QAEJ2E,EAAUC,MAAMC,WAAW,GAAGA,WAAW,GAAK,CAACF,EAAUC,MAAMC,WAAW,GAAGA,WAAW,GAAG9C,QAAQ/B,MAAQ,SAsB/H+E,CAAajB,GAAMrE,MAAK,SAAAkF,GAC7B,MAAO,CACLN,UAAWA,EAAUvE,KAAI,SAAAkF,GAAO,OAAIA,EAAQA,QAAQhF,QACpDkE,aAAcA,EACd/D,OAAQD,EAAgBL,GACxBsE,WAAYA,EAAWrE,KAAI,SAAAmF,GAAG,OAAIA,EAAIjF,QACtC2E,UAAWA,EACXV,OAAQA,EAAS,GACjBG,YAAaA,EACb9E,GAAIA,EACJ2C,MAAOD,EAAQE,cACflC,KAAMA,EACNkF,gBAAiBzB,EAAQe,GAAQW,MACjCC,KAAM3B,EAAQa,GAAqBe,YACnCxF,MAAOA,EAAMC,KAAI,SAAAC,GAAI,OAAIA,EAAKA,KAAKC,QAAMC,OACzCsE,OAAQA,EAAS,QAURe,EALc,SAAAxD,GAC3B,OA7DsB,SAAAA,GACtB,IAAMR,EAAW,CACfjC,EAAW,UAAWyC,GACtBzC,EAAW,kBAAmByC,IAEhC,OAAOH,QAAQC,IAAIN,GAwDZG,CAAgBK,GAASrC,MAAK,SAAAoC,GAAI,OAAIgC,EAAWhC,OC1C1C0D,MA1BhB,SAAqBC,EAAKC,GACxB,IAAIC,GAAW,EAEA,MAAXF,EAAI,KACNA,EAAMA,EAAIG,MAAM,GAChBD,GAAW,GAGb,IAAIE,EAAMC,SAASL,EAAK,IACpBM,GAAKF,GAAO,IAAMH,EAElBK,EAAI,IAAKA,EAAI,IACRA,EAAI,IAAGA,EAAI,GAEpB,IAAIC,GAAMH,GAAO,EAAK,KAAUH,EAE5BM,EAAI,IAAKA,EAAI,IACRA,EAAI,IAAGA,EAAI,GAEpB,IAAIC,GAAW,IAANJ,GAAkBH,EAK3B,OAHIO,EAAI,IAAKA,EAAI,IACRA,EAAI,IAAGA,EAAI,IAEZN,EAAW,IAAM,KAAOM,EAAKD,GAAK,EAAMD,GAAK,IAAKG,SAAS,KCbtDC,EATC,SAAA9D,GACd,OACE,yBAAKG,UAAU,iBACb,0BAAMA,UAAU,uBAAuBH,EAAM+D,OAC5C/D,EAAMP,OC8JEuE,E,YA5Jb,WAAYhE,GAAQ,IAAD,8BACjB,4CAAMA,KAMRiE,kBAAoB,WAClB,EAAKC,mBARY,EAWnBA,gBAAkB,WAChB,IAAMC,EAAmBC,KAAKC,MAAMC,aAAaC,QAAQ,YACrD5C,OAAO6C,KAAKL,GAAkBM,OAChC,EAAKC,SAAS,CAAEC,QAASR,IAEzBjB,EAAqB,EAAKlD,MAAM4E,aAAavH,MAAK,SAAAsH,GAAO,OACvD,EAAKD,SAAS,CAAEC,gBAjBH,EAsBnBE,oBAAsB,WACpB3B,EAAqB,EAAKlD,MAAM4E,aAAavH,MAAK,SAAAsH,GAAO,OACvD,EAAKD,SAAS,CAAEC,gBAxBD,EA4BnBG,iBAAmB,WACb,EAAKC,MAAMJ,SACbL,aAAaU,QAAQ,UAAWZ,KAAKa,UAAU,EAAKF,MAAMJ,WA5B5D,EAAKI,MAAQ,CACXJ,QAAS,IAHM,E,sEAkCT,IAAD,OACPO,KAAKJ,mBADE,MAkBHI,KAAKH,MAAMJ,QAdb1C,EAJK,EAILA,UACArE,EALK,EAKLA,KACAiE,EANK,EAMLA,OACAC,EAPK,EAOLA,aACA/D,EARK,EAQLA,OACAgE,EATK,EASLA,WACAQ,EAVK,EAULA,UACArF,EAXK,EAWLA,GACA2C,EAZK,EAYLA,MACAsC,EAbK,EAaLA,OACAH,EAdK,EAcLA,YACAgB,EAfK,EAeLA,KACAF,EAhBK,EAgBLA,gBACArF,EAjBK,EAiBLA,MAYI0H,EAAiB,WACrB,OAAOpH,EAAS,CAAEqH,gBAAiBjC,EAAYpF,EAAO,IAAK,KAAQ,MAG/DsH,EAAU,SAACC,EAAMvH,GACrB,IAAMwH,EAAQxH,GAAU,GAOxB,OAAOuH,EAAO,4BALZA,EAAK5H,KAAI,SAAC6D,EAAMN,GAAP,OACP,wBAAIC,IAAKD,EAAOhB,MAAO,CAAEmF,gBAAiBG,EAAMtE,KAC7CM,OAGiC,IAqC1C,OAAOI,OAAO6C,KAAKU,KAAKH,MAAMJ,SAASF,OACrC,yBAAKtE,UAAU,eAAeF,MA1DvBlC,EACH,CACEmC,WAAW,0BAAD,OAA4BnC,EAAO,GAAnC,iBAA8CA,EAAO,IAC7DA,EAAO,GADC,UAGZ,MAsDF,yBAAKoC,UAAU,WACb,wBAAIA,UAAU,gBAAgBF,MAAOkF,KAClCvH,GAEH,yBAAKuC,UAAU,sBACb,6BAASA,UAAU,eACjB,yBAAKA,UAAU,qBAAqBqF,IAAK3F,EAAO4F,IAAK7H,IACrD,yBAAKuC,UAAU,sBACb,4BAAKkF,EAAQ5H,EAAOM,KAEtB,wBAAIoC,UAAU,mBAAd,YAAsCjD,IACtC,uBAAGiD,UAAU,gCAAgC2C,GAC7C,uBAAG3C,UAAU,qBAAqB6C,IAEpC,6BAAS7C,UAAU,WACjB,wBAAIA,UAAU,yBAAyBF,MAAOkF,KAA9C,WAGA,kBAAC,EAAD,CAASpB,MAAO,WAAYtE,KAAI,UAAKoC,EAAL,OAChC,kBAAC,EAAD,CAASkC,MAAO,WAAYtE,KAAI,UAAK0C,EAAL,QAChC,kBAAC,EAAD,CAAS4B,MAAO,eAAgBtE,KAAI,UAAKqC,EAAL,OACpC,kBAAC,EAAD,CAASiC,MAAO,eAAgBtE,KAAM4F,EAAQtD,KAC9C,kBAAC,EAAD,CAASgC,MAAO,cAAetE,KAAM4F,EAAQpD,KAC7C,kBAAC,EAAD,CAAS8B,MAAO,iBAAkBtE,KAAMuC,KAE1C,6BAAS7B,UAAU,cACjB,wBAAIA,UAAU,4BAA4BF,MAAOkF,KAAjD,cAGA,yBAAKhF,UAAU,aAjEJ,WACnB,IAAMuF,EAAc,SAAAhG,GAClB,OAAOA,EAAQ9B,OAASA,EAAO,iBAAmB,MAmB9C+H,EAAmB,SAACC,EAAS3E,GACjC,OAAO2E,EACL,wBAAI1E,IAAKD,EAAOd,UAAU,mBACvByF,EAAQlI,KAAI,SAACmI,EAAG5E,GAAJ,OAnBM,SAAC4E,EAAG5E,GAC3B,IAAMvB,EAAU,EAAKM,MAAM8F,YAAYxE,MACrC,SAAA5B,GAAO,OAAIA,EAAQ9B,OAASiI,KAE9B,OAAOnG,EACL,wBACEwB,IAAKD,EACLd,UAAW,yBAA2BuF,EAAYhG,IAElD,kBAAC,IAAD,CAAMY,GAAIZ,EAAQ9B,MAChB,yBAAK4H,IAAK9F,EAAQG,MAAO4F,IAAK/F,EAAQ9B,SAGxC,KAM2BmI,CAAiBF,EAAG5E,OAE/C,MAGN,OAAOsB,EAAU7E,KAAI,SAACkI,EAAS3E,GAAV,OACnB0E,EAAiBC,EAAS3E,MAmCQ0B,QAMpC,yBAAKxC,UAAU,WACb,yBAAKA,UAAU,iB,GAvJD6F,IAAMC,WCgFbC,E,YA9Eb,aAAe,IAAD,8BACZ,+CAWFjC,kBAAoB,WAClB,EAAKC,mBAbO,EAgBdA,gBAAkB,WAKd7E,IAAkBhC,MAAK,SAAA2D,GAAQ,OAAI,EAAK0D,SAAS,CAAE1D,iBArBzC,EAyBdX,eAAiB,SAAA8F,GACf,EAAKzB,SAAS,CAAEyB,oBAChBjD,EAAqBiD,GAAiB9I,MAAK,SAAA+I,GAAM,OAC/C,EAAK1B,SAAS,CAAE0B,eA5BN,EAgCdC,kBAAoB,SAAAC,GAClB,IAAMC,EAASD,EAAME,OAAO5F,MAC5B,EAAK8D,SAAS,CAAE6B,YAlCJ,EAqCdE,WAAa,WACX,IAAMF,EAAS,EAAKxB,MAAMwB,OAAOG,cAC3BC,EAAmB,EAAK5B,MAAM/D,SAASuF,QAC3C,SAAA7G,GAAO,OACLA,EAAQ9B,KAAKgJ,SAASL,IACtB7G,EAAQjC,MAAMoG,WAAW+C,SAASL,MAGtC,OACE,kBAAC,EAAD,CACEvF,SAAU2F,EACVtG,eAAgB,EAAKA,eACrBM,cAAe,EAAK0F,kBACpBxF,WAAY,EAAKkE,MAAMwB,UAlDf,EAuDdM,cAAgB,SAAAC,GACd,OAAO,kBAAC,EAAD,CAASlC,YAAakC,EAAYC,MAAMC,OAAOpJ,KAAMkI,YAAa,EAAKf,MAAM/D,YAxDxE,EA2Dd8D,iBAAmB,WACb,EAAKC,MAAM/D,UACbsD,aAAaU,QAAQ,WAAYZ,KAAKa,UAAU,EAAKF,MAAM/D,YA3D7D,EAAK+D,MAAQ,CACX/D,SAAU,GACVmF,gBAAiB,GACjBI,OAAQ,IAGV,EAAKlG,eAAiB,EAAKA,eAAe4G,KAApB,gBACtB,EAAKZ,kBAAoB,EAAKA,kBAAkBY,KAAvB,gBATb,E,sEAmEZ,OACE,yBAAK9G,UAAU,OACb,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAO+G,OAAK,EAAC9F,KAAK,IAAI+F,OAAQjC,KAAKuB,aACnC,kBAAC,IAAD,CAAOrF,KAAM,SAAU+F,OAAQjC,KAAK2B,sB,GAxE5Bb,IAAMC,WCIJmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASR,MACvB,2DCXNS,IAASL,OAAO,kBAAC,IAAD,KAAY,kBAAC,EAAD,OAAsBM,SAASC,eAAe,SD0HpE,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMxK,MAAK,SAAAyK,GACjCA,EAAaC,kB",
  "file": "static/js/main.5b3b2bb8.chunk.js",
  "sourcesContent": [
    "const getPokemon = (id) => {\n  const ENDPOINT = `https://pokeapi.co/api/v2/pokemon/${id}/`;\n  return fetch(ENDPOINT)\n    .then(response => response.json());\n};\n\nconst getPokemonTypes = types => types.map(type => type.type.name).sort();\n\nconst getPokemonColor = types => {\n  const colors = {\n    grass: '#78c850',\n    water: '#6890f0',\n    fire: '#f08030',\n    poison: '#a040a0',\n    flying: '#A890F0',\n    bug: '#A8B821',\n    normal: '#A8A878',\n    electric: '#f8d12f',\n    ground: '#E0C068',\n    fairy: '#EE99AC',\n    fighting: '#C03028',\n    psychic: '#F75888',\n    rock: '#817333',\n    steel: '#B8B8D0',\n    ice: '#98D8D8',\n    ghost:'#705797',\n    dragon: '#3E1EC0'\n  }\n  return getPokemonTypes(types).map(type => colors[type])\n}\n\nconst createPromisesList = () => {\n  const promises = [];\n  for (let i = 1; i <= 151; i++){\n    promises.push(getPokemon(i));\n  }\n  return promises\n}\n\nconst getPokemonsList = async () => {\n  const data = await Promise.all(createPromisesList());\n  return data.map(pokemon => {\n    const { species, sprites, types } = pokemon;\n    return {\n      name: species.name,\n      image: sprites.front_default,\n      types: getPokemonTypes(types),\n      colors: getPokemonColor(types)\n    };\n  });\n}\n\nexport { getPokemonsList, getPokemonColor };",
    "import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport \"../stylesheets/card.scss\";\n\nconst Card = props => {\n  const { name, image, colors } = props.pokemon;\n  const handleClick = () => props.getPokemonDetails(name);\n  const style = {\n    background: `linear-gradient(90deg, ${colors[0]} 50%, ${colors[1] ||\n      colors[0]} 50%)`\n  };\n  return (\n    <div className=\"pokemon\" style={style} onClick={handleClick}>\n      <Link to={\"/\" + name}>\n        <div\n          className=\"pokemon__image\"\n          style={{ backgroundImage: `url(${image})` }}\n        ></div>\n        <p className=\"pokemon__name\">{name}</p>\n      </Link>\n    </div>\n  );\n};\n\nexport default Card;\n",
    "import React from 'react';\nimport '../stylesheets/header.scss'\n\nconst Header = () => {\n  return (\n    <header className='header'>\n      <h1 className='header__title'>Pokedex</h1>\n    </header>\n  )\n}\n\nexport default Header",
    "import React from \"react\";\nimport '../stylesheets/filter.scss';\n\nconst Filter = props => {\n  return (\n    <div className=\"filter\">\n      <input\n        className=\"filter_input\"\n        onChange={props.onInputChange}\n        value={props.inputValue}\n        placeholder=\"Search for Pokemon name or type\"\n      />\n      {/* <i class=\"fas fa-search\"></i> */}\n    </div>\n  );\n};\n\nexport default Filter;\n",
    "import React from \"react\";\nimport Card from \"./Card\";\nimport \"../stylesheets/list.scss\";\nimport Header from \"./Header\";\nimport Filter from \"./Filter\";\n\nconst renderCardList = props => {\n  return props.pokemons.map((pokemon, index) => {\n    return (\n      <li className=\"list__item\" key={index}>\n        <Card pokemon={pokemon} getPokemonDetails={props.getPokemonDetails} />\n      </li>\n    );\n  });\n};\n\nconst List = props => {\n  return (\n    <div className=\"list-page\">\n      <Header />\n      <Filter inputValue={props.inputValue} onInputChange={props.onInputChange}/>\n      <ul className=\"list\">{renderCardList(props)}</ul>\n    </div>\n  );\n};\n\nexport default List;\n",
    "import { getPokemonColor } from \"./getDataFromServer\";\n\nconst getPokemon = (path, pokemon) => {\n  const ENDPOINT = `https://pokeapi.co/api/v2/${path}/${pokemon}/`;\n  return fetch(ENDPOINT).then(response => response.json());\n};\n\nconst getPokemonsList = pokemon => {\n  const promises = [\n    getPokemon(\"pokemon\", pokemon),\n    getPokemon(\"pokemon-species\", pokemon)\n  ];\n  return Promise.all(promises);\n};\n\nconst getData = data => data.find(item => item.language.name === \"en\");\n\nconst getEvolution = info => {\n  return fetch(info.evolution_chain.url)\n    .then(response => response.json())\n    .then(evolution => {\n      const first = [evolution.chain.species.name];\n      const second = evolution.chain.evolves_to.map(\n        specie => specie.species.name\n      );\n      const getThird = () => evolution.chain.evolves_to[0].evolves_to[0] ? [evolution.chain.evolves_to[0].evolves_to[0].species.name] : null;\n      return [first, second, getThird()];\n    });\n};\n\nconst formatData = data => {\n  const info = Object.assign(data[0], data[1]);\n  const {\n    name,\n    height,\n    id,\n    capture_rate,\n    egg_groups,\n    gender_rate,\n    abilities,\n    flavor_text_entries,\n    weight,\n    sprites,\n    types,\n    genera\n  } = info;\n\n  return getEvolution(info).then(evolution => {\n    return {\n      abilities: abilities.map(ability => ability.ability.name),\n      capture_rate: capture_rate,\n      colors: getPokemonColor(types),\n      egg_groups: egg_groups.map(egg => egg.name),\n      evolution: evolution,\n      height: height / 10,\n      gender_rate: gender_rate,\n      id: id,\n      image: sprites.front_default,\n      name: name,\n      translated_name: getData(genera).genus,\n      text: getData(flavor_text_entries).flavor_text,\n      types: types.map(type => type.type.name).sort(),\n      weight: weight / 10\n    };\n  });\n};\n\nconst getDetailsFromServer = pokemon => {\n  return getPokemonsList(pokemon).then(data => formatData(data));\n};\n\n// {pokemon.evolves_to = evolution.chain.species.name})\nexport default getDetailsFromServer;\n",
    "function darkenColor(col, amt) {\n  var usePound = false;\n\n  if (col[0] === \"#\") {\n    col = col.slice(1);\n    usePound = true;\n  }\n\n  var num = parseInt(col, 16);\n  var r = (num >> 16) + amt;\n\n  if (r > 255) r = 255;\n  else if (r < 0) r = 0;\n\n  var b = ((num >> 8) & 0x00ff) + amt;\n\n  if (b > 255) b = 255;\n  else if (b < 0) b = 0;\n\n  var g = (num & 0x0000ff) + amt;\n\n  if (g > 255) g = 255;\n  else if (g < 0) g = 0;\n\n  return (usePound ? \"#\" : \"\") + (g | (b << 8) | (r << 16)).toString(16);\n}\n export default darkenColor",
    "import React from \"react\";\n\nconst ProfileItem = props => {\n  return (\n    <div className=\"profile__text\">\n      <span className=\"profile__text__span\">{props.quest}</span>\n      {props.data}\n    </div>\n  );\n};\n\nexport default ProfileItem\n",
    "import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport \"../stylesheets/details.scss\";\nimport getDetailsFromServer from \"../modules/getDetailsFromServer\";\nimport darkenColor from \"../modules/darkerColor\";\nimport ProfileItem from \"./ProfileItem\";\n\nclass Details extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      details: {}\n    };\n  }\n\n  componentDidMount = () => {\n    this.getInicialState();\n  };\n\n  getInicialState = () => {\n    const detailsFromLocal = JSON.parse(localStorage.getItem(\"details\"));\n    if (Object.keys(detailsFromLocal).length) {\n      this.setState({ details: detailsFromLocal });\n    } else {\n      getDetailsFromServer(this.props.pokemonName).then(details =>\n        this.setState({ details })\n      );\n    }\n  };\n\n  componentWillUpdate = () => {\n    getDetailsFromServer(this.props.pokemonName).then(details =>\n      this.setState({ details })\n    );\n  };\n\n  saveLocalStorage = () => {\n    if (this.state.details) {\n      localStorage.setItem(\"details\", JSON.stringify(this.state.details));\n    }\n  };\n\n  render() {\n    this.saveLocalStorage();\n\n    const {\n      abilities,\n      name,\n      height,\n      capture_rate,\n      colors,\n      egg_groups,\n      evolution,\n      id,\n      image,\n      weight,\n      gender_rate,\n      text,\n      translated_name,\n      types\n    } = this.state.details;\n\n    const getBGColor = () => {\n      return colors\n        ? {\n            background: `linear-gradient(90deg, ${colors[0]} 50%, ${colors[1] ||\n              colors[0]} 50%)`\n          }\n        : null;\n    };\n\n    const getTitlesColor = () => {\n      return colors ? { backgroundColor: darkenColor(colors[0], -60) } : null;\n    };\n\n    const getList = (list, colors) => {\n      const color = colors || \"\";\n      const renderList = () =>\n        list.map((item, index) => (\n          <li key={index} style={{ backgroundColor: color[index] }}>\n            {item}\n          </li>\n        ));\n      return list ? <ul>{renderList()}</ul> : \"\";\n    };\n\n    const getEvolution = () => {\n      const currPokemon = pokemon => {\n        return pokemon.name === name ? \"currentPokemon\" : null;\n      };\n\n      const getEvolutionItem = (e, index) => {\n        const pokemon = this.props.pokemonList.find(\n          pokemon => pokemon.name === e\n        );\n        return pokemon ? (\n          <li\n            key={index}\n            className={\"evolution__list__item \" + currPokemon(pokemon)}\n          >\n            <Link to={pokemon.name}>\n              <img src={pokemon.image} alt={pokemon.name} />\n            </Link>\n          </li>\n        ) : null;\n      };\n\n      const getEvolutionList = (especie, index) => {\n        return especie ? (\n          <ul key={index} className=\"evolution__list\">\n            {especie.map((e, index) => getEvolutionItem(e, index))}\n          </ul>\n        ) : null;\n      };\n\n      return evolution.map((especie, index) =>\n        getEvolutionList(especie, index)\n      );\n    };\n\n    return Object.keys(this.state.details).length ? (\n      <div className=\"details-page\" style={getBGColor()}>\n        <div className=\"details\">\n          <h1 className=\"details__name\" style={getTitlesColor()}>\n            {name}\n          </h1>\n          <div className=\"details__container\">\n            <section className=\"description\">\n              <img className=\"description__image\" src={image} alt={name} />\n              <div className=\"description__types\">\n                <ul>{getList(types, colors)}</ul>\n              </div>\n              <h3 className=\"description__id\">{`# ${id}`}</h3>\n              <p className=\"description__translated_name\">{translated_name}</p>\n              <p className=\"description__text\">{text}</p>\n            </section>\n            <section className=\"ProfileItem\">\n              <h2 className=\"profile__title --title\" style={getTitlesColor()}>\n                ProfileItem\n              </h2>\n              <ProfileItem quest={\"Height: \"} data={`${height}m`} />\n              <ProfileItem quest={\"Weight: \"} data={`${weight}kg`} />\n              <ProfileItem quest={\"Catch Rate: \"} data={`${capture_rate}%`} />\n              <ProfileItem quest={\"Egg Groups: \"} data={getList(egg_groups)} />\n              <ProfileItem quest={\"Abilities: \"} data={getList(abilities)} />\n              <ProfileItem quest={\"Gender Ratio: \"} data={gender_rate} />\n            </section>\n            <section className=\"evolutions\">\n              <h2 className=\"evolutions__title --title\" style={getTitlesColor()}>\n                Evolutions\n              </h2>\n              <div className=\"evolution\">{getEvolution()}</div>\n            </section>\n          </div>\n        </div>\n      </div>\n    ) : (\n      <div className=\"loading\">\n        <div className=\"pokemon\"></div>\n      </div>\n    );\n  }\n}\n\nexport default Details;\n",
    "import React from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\nimport \"../stylesheets/app.scss\";\nimport { getPokemonsList } from \"../modules/getDataFromServer\";\nimport List from \"./List\";\nimport Details from \"./Details\";\nimport getDetailsFromServer from \"../modules/getDetailsFromServer\";\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      pokemons: [],\n      selectedPokemon: \"\",\n      filter: \"\"\n    };\n\n    this.getPokemonDetails = this.getPokemonDetails.bind(this);\n    this.handleInputChange = this.handleInputChange.bind(this);\n  }\n\n  componentDidMount = () => {\n    this.getInicialState();\n  };\n\n  getInicialState = () => {\n    // const pokemonsFromLocal = JSON.parse(localStorage.getItem(\"pokemons\"));\n    // if (pokemonsFromLocal) {\n    //   this.setState({ pokemons: pokemonsFromLocal });\n    // } else {\n      getPokemonsList().then(pokemons => this.setState({ pokemons }));\n    // }\n  };\n\n  getPokemonDetails = selectedPokemon => {\n    this.setState({ selectedPokemon });\n    getDetailsFromServer(selectedPokemon).then(detale =>\n      this.setState({ detale })\n    );\n  };\n\n  handleInputChange = event => {\n    const filter = event.target.value;\n    this.setState({ filter });\n  };\n\n  renderList = () => {\n    const filter = this.state.filter.toLowerCase();\n    const filteredPokemons = this.state.pokemons.filter(\n      pokemon =>\n        pokemon.name.includes(filter) ||\n        pokemon.types.toString().includes(filter)\n    );\n\n    return (\n      <List\n        pokemons={filteredPokemons}\n        getPokemonDetails={this.getPokemonDetails}\n        onInputChange={this.handleInputChange}\n        inputValue={this.state.filter}\n      />\n    );\n  };\n\n  renderDetails = renderProps => {\n    return <Details pokemonName={renderProps.match.params.name} pokemonList={this.state.pokemons}/>;\n  };\n\n  saveLocalStorage = () => {\n    if (this.state.pokemons) {\n      localStorage.setItem(\"pokemons\", JSON.stringify(this.state.pokemons));\n    }\n  };\n\n  render() {\n    // this.saveLocalStorage();\n    return (\n      <div className=\"App\">\n        <Switch>\n          <Route exact path=\"/\" render={this.renderList} />\n          <Route path={\"/:name\"} render={this.renderDetails} />\n        </Switch>\n      </div>\n    );\n  }\n}\n\nexport default App;\n",
    "// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n",
    "import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {HashRouter} from 'react-router-dom';\nimport './index.scss';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<HashRouter><App /></HashRouter>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"
  ],
  "sourceRoot": ""
}
